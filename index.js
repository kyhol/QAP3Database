const { pool, createTasksTable } = require("./db");
const express = require("express");
const app = express();
const PORT = 3000;

app.use(express.json());

// Initialize database table when server starts
createTasksTable().catch(console.error);

// let tasks = [
//     { id: 1, description: 'Buy groceries', status: 'incomplete' },
//     { id: 2, description: 'Read a book', status: 'complete' },
// ];

// GET /tasks - Get all tasks
app.get("/tasks", async (req, res) => {
  try {
    const result = await pool.query("SELECT * FROM tasks ORDER BY id ASC");
    res.json(result.rows);
  } catch (error) {
    console.error("Error fetching tasks:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// POST /tasks - Add a new task
app.post("/tasks", async (req, res) => {
  // get description and status from request body
  const { description, status = "incomplete" } = req.body;

  // only check for description since status has a default value
  // and ID is auto-generated by PostgreSQL sequence
  if (!description) {
    return res.status(400).json({ error: "Description is required" });
  }

  try {
    // Insert the new task into PostgreSQL database
    const result = await pool.query(
      "INSERT INTO tasks (description, status) VALUES ($1, $2) RETURNING *",
      [description, status]
    );

    // Send back success response with the created task
    res.status(201).json({
      message: "Task added successfully",
      task: result.rows[0], // The newly created task is the first row in the result set
    });
  } catch (error) {
    // Handle errors
    console.error("Error adding task:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
// PUT /tasks/:id - Update a task's status
app.put("/tasks/:id", (request, response) => {
  const taskId = parseInt(request.params.id, 10);
  const { status } = request.body;
  const task = tasks.find((t) => t.id === taskId);

  if (!task) {
    return response.status(404).json({ error: "Task not found" });
  }
  task.status = status;
  response.json({ message: "Task updated successfully" });
});

// DELETE /tasks/:id - Delete a task
app.delete("/tasks/:id", (request, response) => {
  const taskId = parseInt(request.params.id, 10);
  const initialLength = tasks.length;
  tasks = tasks.filter((t) => t.id !== taskId);

  if (tasks.length === initialLength) {
    return response.status(404).json({ error: "Task not found" });
  }
  response.json({ message: "Task deleted successfully" });
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
