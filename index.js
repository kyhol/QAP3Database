const { pool, createTasksTable } = require("./db"); // Import the pool and createTasksTable function from db.js
const express = require("express");
const app = express();
const PORT = 3000;

app.use(express.json());
app.get("/", (req, res) => {
  // Define a GET endpoint for the root URL
  res.json({
    // Send back a JSON response
    message: "Get outta here! Go on, GO! GET!", // Send a message to the client
  });
});

// Initialize database table when server starts
createTasksTable().catch(console.error); // Call the createTasksTable function when the server starts

// let tasks = [
//     { id: 1, description: 'Buy groceries', status: 'incomplete' },
//     { id: 2, description: 'Read a book', status: 'complete' },
// ];

// GET /tasks - Get all tasks
app.get("/tasks", async (req, res) => {
  // Define a GET endpoint for fetching all tasks
  try {
    // Try to fetch all tasks from the database
    const result = await pool.query("SELECT * FROM tasks ORDER BY id ASC"); // Execute the SELECT query
    res.json(result.rows); // Send back the result as JSON
  } catch (error) {
    // Handle errors
    console.error("Error fetching tasks:", error); // Log any errors to the console
    res.status(500).json({ error: "Internal server error" }); // Return a 500 error to the client
  }
});

// POST /tasks - Add a new task
app.post("/tasks", async (req, res) => {
  // Define a POST endpoint for adding a new task
  // get description and status from request body
  const { description, status = "incomplete" } = req.body; // Get the description and status from the request body

  // only check for description since status has a default value
  // and ID is auto-generated by PostgreSQL sequence
  if (!description) {
    return res.status(400).json({ error: "Description is required" }); // If the description is missing, return a 400 error
  }

  try {
    // Insert the new task into PostgreSQL database
    const result = await pool.query(
      // Execute the INSERT query
      "INSERT INTO tasks (description, status) VALUES ($1, $2) RETURNING *", // Execute the INSERT query
      [description, status] // Insert the new task with the specified description and status
    );

    // Send back success response with the created task
    res.status(201).json({
      // Return a 201 status code (Created) to the client
      message: "Task added successfully", // Send a success message
      task: result.rows[0], // The newly created task is the first row in the result set
    });
  } catch (error) {
    // Handle errors
    console.error("Error adding task:", error); // Log any errors to the console
    res.status(500).json({ error: "Internal server error" }); // Return a 500 error to the client
  }
});
// PUT /tasks/:id - Update a task's status
app.put("/tasks/:id", async (req, res) => {
  // Define a PUT endpoint for updating a task's status
  const taskId = parseInt(req.params.id, 10); // Get the task ID from the URL parameters
  const { status } = req.body; // Get the new status from the request body

  if (!status) {
    // Check if the status is missing from the request body
    return res.status(400).json({ error: "Status is required" }); // If it is, return a 400 error
  }

  try {
    // Try to update the task's status
    const result = await pool.query(
      // Execute the SELECT query
      // Execute the UPDATE query
      "UPDATE tasks SET status = $1 WHERE id = $2 RETURNING *", // Update the task with the specified
      [status, taskId] // task ID and return the updated task
    );

    if (result.rows.length === 0) {
      // Check if the task was updated
      // If no task was updated, return a 404 error
      return res.status(404).json({ error: "Task not found" }); // If the task was not found, return a 404 error
    }

    res.json({
      // If the task was updated, return a success message and the updated task
      message: "Task updated successfully", // Send a success message
      task: result.rows[0], // The updated task is the first row in the result set
    });
  } catch (error) {
    console.error("Error updating task:", error); // Log any errors to the console
    res.status(500).json({ error: "Internal server error" }); // Return a 500 error to the client
  }
});

// DELETE /tasks/:id - Delete a task
app.delete("/tasks/:id", async (req, res) => {
  // Define a DELETE endpoint for deleting a task
  const taskId = parseInt(req.params.id, 10); // Get the task ID from the URL parameters

  try {
    // Try to delete the task
    const result = await pool.query(
      // Execute the DELETE query
      "DELETE FROM tasks WHERE id = $1 RETURNING *", // Delete the task with the specified
      [taskId] // task ID and return the deleted task
    );

    if (result.rows.length === 0) {
      // If no task was deleted, return a 404 error
      return res.status(404).json({ error: "Task not found" }); // If the task was not found, return a 404 error
    }

    res.json({ message: "Task deleted successfully" }); // If the task was deleted, return a success message
  } catch (error) {
    // Handle errors
    console.error("Error deleting task:", error); // Log any errors to the console
    res.status(500).json({ error: "Internal server error" }); // Return a 500 error to the client
  }
});

app.listen(PORT, () => {
  // Start the server
  console.log(`Server is running on http://localhost:${PORT}`); // Log a message when the server starts
}); // Start the server on port 3000
